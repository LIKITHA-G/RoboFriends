{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onsearchchange","event","setState","searchfeild","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredrobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5f18245.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name,email,id}) =>{\r\n\treturn(\r\n\t\t\r\n\t\t// <h1>Robofriends</h1> // cant be added cz can return only 1 thing\r\n\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${id}?200*200`} />\r\n    \t<div>\r\n    \t\t<h2>{name}</h2>\r\n    \t\t<p>{email}</p>\t\r\n    \t</div>\r\n\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots})=>{\r\n\r\n\treturn(\r\n\t<div>\r\n\t{\r\n\t robots.map((user,i)=>{\r\n\t\r\n\treturn (\r\n\t\t<Card \r\n\t\tkey={i} \r\n\t\tid = {robots[i].id} \r\n\t\tname = {robots[i].name} \r\n\t\temail = {robots[i].email} \r\n\t\t/>\r\n\t\t);\r\n\t\t})\r\n       \r\n     }\r\n\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield,searchchange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange={searchchange}//in html onchange is a event that changes , whenever onserchchange event is triggered in app.ja the trigger is passed to the searchchange reflected in here\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;  ","import React from 'react';\r\n\r\nconst Scroll =(props)=>\r\n{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}> \r\n\r\n\t\t{props.children}\r\n\t\t</div>\r\n\r\n\t\t) \r\n}\r\n\r\nexport default Scroll;\r\n\r\n//double {} cz we are declaring in css objects and overflowY makes the serch box visible even when we scroll down to bootom","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{ //app component with 2 states and componenets with states is called smart componenets\r\n\tconstructor()\r\n\t{\r\n\t\tsuper()\r\n\t\tthis.state={     //states uses class function, state describes app\r\n\t\t\trobots: [] , //robots is passed as props here\r\n\t        searchfeild:''\r\n\t}\r\n}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>{return response.json()})\r\n\t\t.then(users =>{this.setState({robots:users})})\r\n\t}\r\n\t\t\r\n\t\r\n\tonsearchchange = (event) => \r\n\t{\r\n\t\tthis.setState({ searchfeild: event.target.value})\r\n      }\r\n\r\n      \r\n\r\n\trender()\r\n\t{\r\n\t\tconst { robots,searchfeild }= this.state;\r\n\t\tconst filteredrobots = robots.filter(robots=>{ //filtering robots \r\n\t\treturn robots.name.toLowerCase().includes(searchfeild.toLowerCase()) //robots serached in search box is converted to lowercase and also the names of robots are converted to lower case to match the search\r\n\t\t})\r\n\t\treturn (!robots.length) ? // in case there are many users n loading takes time\r\n        <h1> LOADING </h1> :\r\n\t    \r\n\t\t<div className = 'tc'>\r\n\t\t<h1 className=\"f1\">Robofriends</h1>\r\n\t\t <SearchBox searchchange={this.onsearchchange}/>\r\n\t\t <Scroll>\r\n\t\t<CardList robots={filteredrobots}/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t\r\n        }\r\n \t}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}